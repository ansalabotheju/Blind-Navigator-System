
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000124  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000023  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000008f  00000000  00000000  00000167  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000052  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000a0  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000076  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
void send_uart(unsigned char val);
void send_string(char *s);
unsigned int val;
int main(void){

		DDRB = 0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
		ADCSRA =1<<ADEN|1<<ADPS1|1<<ADPS0;
  80:	83 e8       	ldi	r24, 0x83	; 131
  82:	86 b9       	out	0x06, r24	; 6
		ADMUX = 1<<REFS0;
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
	
		ADCSRA = ADCSRA|(1<<ADSC); //start convertion
		while((ADCSRA & (1<<ADSC))==0);//wait for finish
		val = ADCL|ADCH<<8;
		if(val<500){
			PORTB = 0xff;
  88:	4f ef       	ldi	r20, 0xFF	; 255
		ADMUX = 1<<REFS0;
		//ADCSRA = ADCSRA|(0<<ADSC); //end convertio
		
    while(1) {
	
		ADCSRA = ADCSRA|(1<<ADSC); //start convertion
  8a:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1<<ADSC))==0);//wait for finish
  8c:	36 9b       	sbis	0x06, 6	; 6
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x10>
		val = ADCL|ADCH<<8;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	25 b1       	in	r18, 0x05	; 5
		if(val<500){
  94:	32 2f       	mov	r19, r18
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	82 2b       	or	r24, r18
  9c:	93 2b       	or	r25, r19
  9e:	84 5f       	subi	r24, 0xF4	; 244
  a0:	91 40       	sbci	r25, 0x01	; 1
  a2:	10 f4       	brcc	.+4      	; 0xa8 <main+0x2c>
			PORTB = 0xff;
  a4:	48 bb       	out	0x18, r20	; 24
  a6:	f1 cf       	rjmp	.-30     	; 0x8a <main+0xe>
			//_delay_ms(5000);
		}else{
			PORTB = 0x00;
  a8:	18 ba       	out	0x18, r1	; 24
  aa:	ef cf       	rjmp	.-34     	; 0x8a <main+0xe>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
