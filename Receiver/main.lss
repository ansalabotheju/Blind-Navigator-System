
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000656  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a1e  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000152  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000654  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014a  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006b6  00000000  00000000  00001a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  74:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
#define  Echo_pin_3	PB2

volatile int TimerOverflow = 0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	TimerOverflow++;
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	90 91 61 00 	lds	r25, 0x0061
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25
  98:	80 93 60 00 	sts	0x0060, r24

}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <distance_cal>:
		
	}
	return 0;
}

int distance_cal(int trig_pin, int echo_pin){
  aa:	78 2f       	mov	r23, r24
		int count_1=0;
		int overflow =0;
		double distance_value =0;
			
		//setting up TIMER0 For time measurements
		TCNT0 = 0;
  ac:	12 be       	out	0x32, r1	; 50
		TCCR0 |= (1<<CS01); // PRESCALER 8
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	83 bf       	out	0x33, r24	; 51
		TIMSK = (1<<TOIE0);// enable TIMER) overflow Interrupt
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 bf       	out	0x39, r24	; 57
		sei();// enable global Interrupts
  b8:	78 94       	sei
  ba:	84 ef       	ldi	r24, 0xF4	; 244
  bc:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	28 ec       	ldi	r18, 0xC8	; 200
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <distance_cal+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <distance_cal+0x18>
		_delay_ms(50);

		/* Make a 15us trigger pulse on trig pin_1 to HC-SR05 */
		PORTB =0x00;
  cc:	18 ba       	out	0x18, r1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ce:	3a e1       	ldi	r19, 0x1A	; 26
  d0:	83 2f       	mov	r24, r19
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <distance_cal+0x28>
		_delay_us(10);
		PORTB |= 1<<trig_pin;
  d6:	28 b3       	in	r18, 0x18	; 24
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	ca 01       	movw	r24, r20
  de:	02 c0       	rjmp	.+4      	; 0xe4 <distance_cal+0x3a>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	7a 95       	dec	r23
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <distance_cal+0x36>
  e8:	28 2b       	or	r18, r24
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	3a 95       	dec	r19
  ee:	f1 f7       	brne	.-4      	; 0xec <distance_cal+0x42>
		_delay_us(10);
		PORTB &= ~(1<<trig_pin);
  f0:	28 b3       	in	r18, 0x18	; 24
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <distance_cal+0x54>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <distance_cal+0x50>

		/* Wait for rising edge */
		while(1){
			if(!(PINB & (1<<echo_pin))){continue;}
 102:	86 b3       	in	r24, 0x16	; 22
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	84 23       	and	r24, r20
 108:	95 23       	and	r25, r21
 10a:	89 2b       	or	r24, r25
 10c:	d1 f3       	breq	.-12     	; 0x102 <distance_cal+0x58>
			else{
				TCNT0 =0;
 10e:	12 be       	out	0x32, r1	; 50
				TimerOverflow=0;
 110:	10 92 61 00 	sts	0x0061, r1
 114:	10 92 60 00 	sts	0x0060, r1
				break;}
			}
		
		/* Wait for falling edge */
		while (1){
			if(PINB & (1<<echo_pin)){continue;}
 118:	86 b3       	in	r24, 0x16	; 22
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	84 23       	and	r24, r20
 11e:	95 23       	and	r25, r21
 120:	89 2b       	or	r24, r25
 122:	d1 f7       	brne	.-12     	; 0x118 <distance_cal+0x6e>
			else{
				count_1 = TCNT0 ;
 124:	22 b7       	in	r18, 0x32	; 50
 126:	30 e0       	ldi	r19, 0x00	; 0
				overflow = TimerOverflow;
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	90 91 61 00 	lds	r25, 0x0061
				break;}
			}

		cli();//disable global Interrupts
 130:	f8 94       	cli
 132:	98 2f       	mov	r25, r24
 134:	88 27       	eor	r24, r24
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	6a e3       	ldi	r22, 0x3A	; 58
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 c8 02 	call	0x590	; 0x590 <__divmodhi4>
 142:	88 27       	eor	r24, r24
 144:	77 fd       	sbrc	r23, 7
 146:	80 95       	com	r24
 148:	98 2f       	mov	r25, r24
 14a:	0e 94 3c 02 	call	0x478	; 0x478 <__floatsisf>
 14e:	0e 94 09 02 	call	0x412	; 0x412 <__fixsfsi>
		count_1 = count_1+ 256*(overflow);

		distance_value = count_1/58;// distance calculation  : distance in Centimeters

		return distance_value;
}
 152:	cb 01       	movw	r24, r22
 154:	08 95       	ret

00000156 <main>:
{
	TimerOverflow++;

}

int main(void){
 156:	6f 92       	push	r6
 158:	7f 92       	push	r7
 15a:	8f 92       	push	r8
 15c:	9f 92       	push	r9
 15e:	af 92       	push	r10
 160:	bf 92       	push	r11
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
	double distance_1;
	double distance_3;

	
	/* Make trigger pins as output and echo pins as inputs :33-->40 10101000 */
	DDRB =0xA8;
 172:	88 ea       	ldi	r24, 0xA8	; 168
 174:	87 bb       	out	0x17, r24	; 23
	DDRC =0x00;
 176:	14 ba       	out	0x14, r1	; 20
	DDRA =0xff;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	8a bb       	out	0x1a, r24	; 26
	DDRD =0xff;
 17c:	81 bb       	out	0x11, r24	; 17
		
		//take the distance measurement to account
		
		if( distance_1<=100){
			
			PORTA = 1<<1;
 17e:	e2 e0       	ldi	r30, 0x02	; 2
 180:	8e 2e       	mov	r8, r30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 182:	c8 ec       	ldi	r28, 0xC8	; 200
 184:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(1000);
			PORTA =0<<1;
			_delay_ms(1000);
			PORTA = 1<<5;
 186:	70 e2       	ldi	r23, 0x20	; 32
 188:	77 2e       	mov	r7, r23
			PORTA =0<<6;
			_delay_ms(5000);
		}
		
		else if(distance_3<150){
			PORTA = 1<<6;
 18a:	60 e4       	ldi	r22, 0x40	; 64
 18c:	96 2e       	mov	r9, r22
		}
		
		
		if(PINC & (1<<2)){
			
			PORTD = 1<<2;
 18e:	54 e0       	ldi	r21, 0x04	; 4
 190:	65 2e       	mov	r6, r21

	/*Calculate width of Echo by Getting TCNT1 Timer values */

	while (1){	
	
		distance_1 = distance_cal(Trigger_pin_1,Echo_pin_1);
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	66 e0       	ldi	r22, 0x06	; 6
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 55 00 	call	0xaa	; 0xaa <distance_cal>
 19e:	7c 01       	movw	r14, r24
		distance_3 = distance_cal(Trigger_pin_3,Echo_pin_3);
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 55 00 	call	0xaa	; 0xaa <distance_cal>
 1ac:	aa 27       	eor	r26, r26
 1ae:	97 fd       	sbrc	r25, 7
 1b0:	a0 95       	com	r26
 1b2:	ba 2f       	mov	r27, r26
 1b4:	bc 01       	movw	r22, r24
 1b6:	cd 01       	movw	r24, r26
 1b8:	0e 94 3c 02 	call	0x478	; 0x478 <__floatsisf>
 1bc:	5b 01       	movw	r10, r22
 1be:	6c 01       	movw	r12, r24
		
		//take the distance measurement to account
		
		if( distance_1<=100){
 1c0:	00 27       	eor	r16, r16
 1c2:	f7 fc       	sbrc	r15, 7
 1c4:	00 95       	com	r16
 1c6:	10 2f       	mov	r17, r16
 1c8:	c8 01       	movw	r24, r16
 1ca:	b7 01       	movw	r22, r14
 1cc:	0e 94 3c 02 	call	0x478	; 0x478 <__floatsisf>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	48 ec       	ldi	r20, 0xC8	; 200
 1d6:	52 e4       	ldi	r21, 0x42	; 66
 1d8:	0e 94 05 02 	call	0x40a	; 0x40a <__cmpsf2>
 1dc:	18 16       	cp	r1, r24
 1de:	04 f1       	brlt	.+64     	; 0x220 <main+0xca>
			
			PORTA = 1<<1;
 1e0:	8b ba       	out	0x1b, r8	; 27
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	97 e2       	ldi	r25, 0x27	; 39
 1e6:	fe 01       	movw	r30, r28
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ee:	d9 f7       	brne	.-10     	; 0x1e6 <main+0x90>
			_delay_ms(1000);
			PORTA =0<<1;
 1f0:	1b ba       	out	0x1b, r1	; 27
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	97 e2       	ldi	r25, 0x27	; 39
 1f6:	fe 01       	movw	r30, r28
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <main+0xa0>
			_delay_ms(1000);
			PORTA = 1<<5;
 200:	7b ba       	out	0x1b, r7	; 27
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	97 e2       	ldi	r25, 0x27	; 39
 206:	fe 01       	movw	r30, r28
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20e:	d9 f7       	brne	.-10     	; 0x206 <main+0xb0>
			_delay_ms(1000);
			PORTA =0<<1;
 210:	1b ba       	out	0x1b, r1	; 27
 212:	80 e5       	ldi	r24, 0x50	; 80
 214:	93 ec       	ldi	r25, 0xC3	; 195
 216:	fe 01       	movw	r30, r28
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21e:	d9 f7       	brne	.-10     	; 0x216 <main+0xc0>
			_delay_ms(5000);
			
			
		}
		
		if((distance_3<180)&&(distance_3>170)){
 220:	c6 01       	movw	r24, r12
 222:	b5 01       	movw	r22, r10
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	44 e3       	ldi	r20, 0x34	; 52
 22a:	53 e4       	ldi	r21, 0x43	; 67
 22c:	0e 94 05 02 	call	0x40a	; 0x40a <__cmpsf2>
 230:	88 23       	and	r24, r24
 232:	9c f4       	brge	.+38     	; 0x25a <main+0x104>
 234:	c6 01       	movw	r24, r12
 236:	b5 01       	movw	r22, r10
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	4a e2       	ldi	r20, 0x2A	; 42
 23e:	53 e4       	ldi	r21, 0x43	; 67
 240:	0e 94 c4 02 	call	0x588	; 0x588 <__gesf2>
 244:	18 16       	cp	r1, r24
 246:	4c f4       	brge	.+18     	; 0x25a <main+0x104>
			
			PORTA =0<<6;
 248:	1b ba       	out	0x1b, r1	; 27
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	9e e4       	ldi	r25, 0x4E	; 78
 24e:	fe 01       	movw	r30, r28
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	d9 f7       	brne	.-10     	; 0x24e <main+0xf8>
 258:	bc c0       	rjmp	.+376    	; 0x3d2 <main+0x27c>
			_delay_ms(2000);
		}
		
		else if(distance_3>=180){
 25a:	c6 01       	movw	r24, r12
 25c:	b5 01       	movw	r22, r10
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	44 e3       	ldi	r20, 0x34	; 52
 264:	53 e4       	ldi	r21, 0x43	; 67
 266:	0e 94 c4 02 	call	0x588	; 0x588 <__gesf2>
 26a:	88 23       	and	r24, r24
 26c:	0c f4       	brge	.+2      	; 0x270 <main+0x11a>
 26e:	41 c0       	rjmp	.+130    	; 0x2f2 <main+0x19c>
			
			PORTA = 1<<6;
 270:	9b ba       	out	0x1b, r9	; 27
 272:	88 ee       	ldi	r24, 0xE8	; 232
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	fe 01       	movw	r30, r28
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27e:	d9 f7       	brne	.-10     	; 0x276 <main+0x120>
			_delay_ms(100);
			PORTA =0<<6;
 280:	1b ba       	out	0x1b, r1	; 27
 282:	88 ee       	ldi	r24, 0xE8	; 232
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	fe 01       	movw	r30, r28
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x132>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	d9 f7       	brne	.-10     	; 0x286 <main+0x130>
			_delay_ms(100);
			PORTA = 1<<6;
 290:	9b ba       	out	0x1b, r9	; 27
 292:	88 ee       	ldi	r24, 0xE8	; 232
 294:	93 e0       	ldi	r25, 0x03	; 3
 296:	fe 01       	movw	r30, r28
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29e:	d9 f7       	brne	.-10     	; 0x296 <main+0x140>
			_delay_ms(100);
			PORTA =0<<6;
 2a0:	1b ba       	out	0x1b, r1	; 27
 2a2:	88 ee       	ldi	r24, 0xE8	; 232
 2a4:	93 e0       	ldi	r25, 0x03	; 3
 2a6:	fe 01       	movw	r30, r28
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <main+0x150>
			_delay_ms(100);
			PORTA = 1<<6;
 2b0:	9b ba       	out	0x1b, r9	; 27
 2b2:	88 ee       	ldi	r24, 0xE8	; 232
 2b4:	93 e0       	ldi	r25, 0x03	; 3
 2b6:	fe 01       	movw	r30, r28
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <main+0x160>
			_delay_ms(100);
			PORTA =0<<6;
 2c0:	1b ba       	out	0x1b, r1	; 27
 2c2:	88 ee       	ldi	r24, 0xE8	; 232
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	fe 01       	movw	r30, r28
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ce:	d9 f7       	brne	.-10     	; 0x2c6 <main+0x170>
			_delay_ms(100);
			PORTA = 1<<6;
 2d0:	9b ba       	out	0x1b, r9	; 27
 2d2:	88 ee       	ldi	r24, 0xE8	; 232
 2d4:	93 e0       	ldi	r25, 0x03	; 3
 2d6:	fe 01       	movw	r30, r28
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2de:	d9 f7       	brne	.-10     	; 0x2d6 <main+0x180>
			_delay_ms(100);
			PORTA =0<<6;
 2e0:	1b ba       	out	0x1b, r1	; 27
 2e2:	80 e5       	ldi	r24, 0x50	; 80
 2e4:	93 ec       	ldi	r25, 0xC3	; 195
 2e6:	fe 01       	movw	r30, r28
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <main+0x190>
 2f0:	70 c0       	rjmp	.+224    	; 0x3d2 <main+0x27c>
			_delay_ms(5000);
			
		}
		
		else if((distance_3<=170)&&(distance_3>=150)){
 2f2:	c6 01       	movw	r24, r12
 2f4:	b5 01       	movw	r22, r10
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	4a e2       	ldi	r20, 0x2A	; 42
 2fc:	53 e4       	ldi	r21, 0x43	; 67
 2fe:	0e 94 05 02 	call	0x40a	; 0x40a <__cmpsf2>
 302:	18 16       	cp	r1, r24
 304:	5c f1       	brlt	.+86     	; 0x35c <main+0x206>
 306:	c6 01       	movw	r24, r12
 308:	b5 01       	movw	r22, r10
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	46 e1       	ldi	r20, 0x16	; 22
 310:	53 e4       	ldi	r21, 0x43	; 67
 312:	0e 94 c4 02 	call	0x588	; 0x588 <__gesf2>
 316:	88 23       	and	r24, r24
 318:	0c f1       	brlt	.+66     	; 0x35c <main+0x206>
			PORTA = 1<<6;
 31a:	9b ba       	out	0x1b, r9	; 27
 31c:	88 ee       	ldi	r24, 0xE8	; 232
 31e:	93 e0       	ldi	r25, 0x03	; 3
 320:	fe 01       	movw	r30, r28
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 328:	d9 f7       	brne	.-10     	; 0x320 <main+0x1ca>
			_delay_ms(100);
			PORTA =0<<6;
 32a:	1b ba       	out	0x1b, r1	; 27
 32c:	88 ee       	ldi	r24, 0xE8	; 232
 32e:	93 e0       	ldi	r25, 0x03	; 3
 330:	fe 01       	movw	r30, r28
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x1dc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 336:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 338:	d9 f7       	brne	.-10     	; 0x330 <main+0x1da>
			_delay_ms(100);
			PORTA = 1<<6;
 33a:	9b ba       	out	0x1b, r9	; 27
 33c:	88 ee       	ldi	r24, 0xE8	; 232
 33e:	93 e0       	ldi	r25, 0x03	; 3
 340:	fe 01       	movw	r30, r28
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 346:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 348:	d9 f7       	brne	.-10     	; 0x340 <main+0x1ea>
			_delay_ms(100);
			PORTA =0<<6;
 34a:	1b ba       	out	0x1b, r1	; 27
 34c:	80 e5       	ldi	r24, 0x50	; 80
 34e:	93 ec       	ldi	r25, 0xC3	; 195
 350:	fe 01       	movw	r30, r28
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x1fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 356:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 358:	d9 f7       	brne	.-10     	; 0x350 <main+0x1fa>
 35a:	3b c0       	rjmp	.+118    	; 0x3d2 <main+0x27c>
			_delay_ms(5000);
		}
		
		else if(distance_3<150){
 35c:	c6 01       	movw	r24, r12
 35e:	b5 01       	movw	r22, r10
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	46 e1       	ldi	r20, 0x16	; 22
 366:	53 e4       	ldi	r21, 0x43	; 67
 368:	0e 94 05 02 	call	0x40a	; 0x40a <__cmpsf2>
 36c:	88 23       	and	r24, r24
 36e:	0c f0       	brlt	.+2      	; 0x372 <main+0x21c>
 370:	30 c0       	rjmp	.+96     	; 0x3d2 <main+0x27c>
			PORTA = 1<<6;
 372:	9b ba       	out	0x1b, r9	; 27
 374:	88 ee       	ldi	r24, 0xE8	; 232
 376:	93 e0       	ldi	r25, 0x03	; 3
 378:	fe 01       	movw	r30, r28
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 37e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 380:	d9 f7       	brne	.-10     	; 0x378 <main+0x222>
			_delay_ms(100);
			PORTA =0<<6;
 382:	1b ba       	out	0x1b, r1	; 27
 384:	88 ee       	ldi	r24, 0xE8	; 232
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	fe 01       	movw	r30, r28
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 38e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 390:	d9 f7       	brne	.-10     	; 0x388 <main+0x232>
			_delay_ms(100);
			PORTA = 1<<6;
 392:	9b ba       	out	0x1b, r9	; 27
 394:	88 ee       	ldi	r24, 0xE8	; 232
 396:	93 e0       	ldi	r25, 0x03	; 3
 398:	fe 01       	movw	r30, r28
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 39e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a0:	d9 f7       	brne	.-10     	; 0x398 <main+0x242>
			_delay_ms(100);
			PORTA =0<<6;
 3a2:	1b ba       	out	0x1b, r1	; 27
 3a4:	88 ee       	ldi	r24, 0xE8	; 232
 3a6:	93 e0       	ldi	r25, 0x03	; 3
 3a8:	fe 01       	movw	r30, r28
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x254>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b0:	d9 f7       	brne	.-10     	; 0x3a8 <main+0x252>
			_delay_ms(100);
			PORTA = 1<<6;
 3b2:	9b ba       	out	0x1b, r9	; 27
 3b4:	88 ee       	ldi	r24, 0xE8	; 232
 3b6:	93 e0       	ldi	r25, 0x03	; 3
 3b8:	fe 01       	movw	r30, r28
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x264>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c0:	d9 f7       	brne	.-10     	; 0x3b8 <main+0x262>
			_delay_ms(100);
			PORTA =0<<6;
 3c2:	1b ba       	out	0x1b, r1	; 27
 3c4:	80 e5       	ldi	r24, 0x50	; 80
 3c6:	93 ec       	ldi	r25, 0xC3	; 195
 3c8:	fe 01       	movw	r30, r28
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x274>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d0:	d9 f7       	brne	.-10     	; 0x3c8 <main+0x272>
			_delay_ms(5000);
		}
		
		
		if(PINC & (1<<2)){
 3d2:	9a 9b       	sbis	0x13, 2	; 19
 3d4:	11 c0       	rjmp	.+34     	; 0x3f8 <main+0x2a2>
			
			PORTD = 1<<2;
 3d6:	62 ba       	out	0x12, r6	; 18
 3d8:	80 e2       	ldi	r24, 0x20	; 32
 3da:	9e e4       	ldi	r25, 0x4E	; 78
 3dc:	fe 01       	movw	r30, r28
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <main+0x288>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e4:	d9 f7       	brne	.-10     	; 0x3dc <main+0x286>
			_delay_ms(2000);
			PORTD = 0<<2;
 3e6:	12 ba       	out	0x12, r1	; 18
 3e8:	80 e5       	ldi	r24, 0x50	; 80
 3ea:	93 ec       	ldi	r25, 0xC3	; 195
 3ec:	fe 01       	movw	r30, r28
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x298>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <main+0x296>
 3f6:	cd ce       	rjmp	.-614    	; 0x192 <main+0x3c>
			
			
			
		}else{
		
			PORTD = 0<<2;
 3f8:	12 ba       	out	0x12, r1	; 18
 3fa:	80 e5       	ldi	r24, 0x50	; 80
 3fc:	93 ec       	ldi	r25, 0xC3	; 195
 3fe:	fe 01       	movw	r30, r28
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <main+0x2aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 404:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 406:	d9 f7       	brne	.-10     	; 0x3fe <main+0x2a8>
 408:	c4 ce       	rjmp	.-632    	; 0x192 <main+0x3c>

0000040a <__cmpsf2>:
 40a:	71 d0       	rcall	.+226    	; 0x4ee <__fp_cmp>
 40c:	08 f4       	brcc	.+2      	; 0x410 <__cmpsf2+0x6>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret

00000412 <__fixsfsi>:
 412:	04 d0       	rcall	.+8      	; 0x41c <__fixunssfsi>
 414:	68 94       	set
 416:	b1 11       	cpse	r27, r1
 418:	b1 c0       	rjmp	.+354    	; 0x57c <__fp_szero>
 41a:	08 95       	ret

0000041c <__fixunssfsi>:
 41c:	94 d0       	rcall	.+296    	; 0x546 <__fp_splitA>
 41e:	88 f0       	brcs	.+34     	; 0x442 <__fixunssfsi+0x26>
 420:	9f 57       	subi	r25, 0x7F	; 127
 422:	90 f0       	brcs	.+36     	; 0x448 <__fixunssfsi+0x2c>
 424:	b9 2f       	mov	r27, r25
 426:	99 27       	eor	r25, r25
 428:	b7 51       	subi	r27, 0x17	; 23
 42a:	a0 f0       	brcs	.+40     	; 0x454 <__fixunssfsi+0x38>
 42c:	d1 f0       	breq	.+52     	; 0x462 <__fixunssfsi+0x46>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	1a f0       	brmi	.+6      	; 0x43e <__fixunssfsi+0x22>
 438:	ba 95       	dec	r27
 43a:	c9 f7       	brne	.-14     	; 0x42e <__fixunssfsi+0x12>
 43c:	12 c0       	rjmp	.+36     	; 0x462 <__fixunssfsi+0x46>
 43e:	b1 30       	cpi	r27, 0x01	; 1
 440:	81 f0       	breq	.+32     	; 0x462 <__fixunssfsi+0x46>
 442:	9b d0       	rcall	.+310    	; 0x57a <__fp_zero>
 444:	b1 e0       	ldi	r27, 0x01	; 1
 446:	08 95       	ret
 448:	98 c0       	rjmp	.+304    	; 0x57a <__fp_zero>
 44a:	67 2f       	mov	r22, r23
 44c:	78 2f       	mov	r23, r24
 44e:	88 27       	eor	r24, r24
 450:	b8 5f       	subi	r27, 0xF8	; 248
 452:	39 f0       	breq	.+14     	; 0x462 <__fixunssfsi+0x46>
 454:	b9 3f       	cpi	r27, 0xF9	; 249
 456:	cc f3       	brlt	.-14     	; 0x44a <__fixunssfsi+0x2e>
 458:	86 95       	lsr	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b3 95       	inc	r27
 460:	d9 f7       	brne	.-10     	; 0x458 <__fixunssfsi+0x3c>
 462:	3e f4       	brtc	.+14     	; 0x472 <__fixunssfsi+0x56>
 464:	90 95       	com	r25
 466:	80 95       	com	r24
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <__floatunsisf>:
 474:	e8 94       	clt
 476:	09 c0       	rjmp	.+18     	; 0x48a <__floatsisf+0x12>

00000478 <__floatsisf>:
 478:	97 fb       	bst	r25, 7
 47a:	3e f4       	brtc	.+14     	; 0x48a <__floatsisf+0x12>
 47c:	90 95       	com	r25
 47e:	80 95       	com	r24
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	99 23       	and	r25, r25
 48c:	a9 f0       	breq	.+42     	; 0x4b8 <__floatsisf+0x40>
 48e:	f9 2f       	mov	r31, r25
 490:	96 e9       	ldi	r25, 0x96	; 150
 492:	bb 27       	eor	r27, r27
 494:	93 95       	inc	r25
 496:	f6 95       	lsr	r31
 498:	87 95       	ror	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	b7 95       	ror	r27
 4a0:	f1 11       	cpse	r31, r1
 4a2:	f8 cf       	rjmp	.-16     	; 0x494 <__floatsisf+0x1c>
 4a4:	fa f4       	brpl	.+62     	; 0x4e4 <__floatsisf+0x6c>
 4a6:	bb 0f       	add	r27, r27
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__floatsisf+0x36>
 4aa:	60 ff       	sbrs	r22, 0
 4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <__floatsisf+0x6c>
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <__floatsisf+0x6c>
 4b8:	88 23       	and	r24, r24
 4ba:	11 f0       	breq	.+4      	; 0x4c0 <__floatsisf+0x48>
 4bc:	96 e9       	ldi	r25, 0x96	; 150
 4be:	11 c0       	rjmp	.+34     	; 0x4e2 <__floatsisf+0x6a>
 4c0:	77 23       	and	r23, r23
 4c2:	21 f0       	breq	.+8      	; 0x4cc <__floatsisf+0x54>
 4c4:	9e e8       	ldi	r25, 0x8E	; 142
 4c6:	87 2f       	mov	r24, r23
 4c8:	76 2f       	mov	r23, r22
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__floatsisf+0x5e>
 4cc:	66 23       	and	r22, r22
 4ce:	71 f0       	breq	.+28     	; 0x4ec <__floatsisf+0x74>
 4d0:	96 e8       	ldi	r25, 0x86	; 134
 4d2:	86 2f       	mov	r24, r22
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	2a f0       	brmi	.+10     	; 0x4e4 <__floatsisf+0x6c>
 4da:	9a 95       	dec	r25
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	da f7       	brpl	.-10     	; 0x4da <__floatsisf+0x62>
 4e4:	88 0f       	add	r24, r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret

000004ee <__fp_cmp>:
 4ee:	99 0f       	add	r25, r25
 4f0:	00 08       	sbc	r0, r0
 4f2:	55 0f       	add	r21, r21
 4f4:	aa 0b       	sbc	r26, r26
 4f6:	e0 e8       	ldi	r30, 0x80	; 128
 4f8:	fe ef       	ldi	r31, 0xFE	; 254
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	e8 07       	cpc	r30, r24
 500:	f9 07       	cpc	r31, r25
 502:	c0 f0       	brcs	.+48     	; 0x534 <__fp_cmp+0x46>
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	e4 07       	cpc	r30, r20
 50a:	f5 07       	cpc	r31, r21
 50c:	98 f0       	brcs	.+38     	; 0x534 <__fp_cmp+0x46>
 50e:	62 1b       	sub	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	95 0b       	sbc	r25, r21
 516:	39 f4       	brne	.+14     	; 0x526 <__fp_cmp+0x38>
 518:	0a 26       	eor	r0, r26
 51a:	61 f0       	breq	.+24     	; 0x534 <__fp_cmp+0x46>
 51c:	23 2b       	or	r18, r19
 51e:	24 2b       	or	r18, r20
 520:	25 2b       	or	r18, r21
 522:	21 f4       	brne	.+8      	; 0x52c <__fp_cmp+0x3e>
 524:	08 95       	ret
 526:	0a 26       	eor	r0, r26
 528:	09 f4       	brne	.+2      	; 0x52c <__fp_cmp+0x3e>
 52a:	a1 40       	sbci	r26, 0x01	; 1
 52c:	a6 95       	lsr	r26
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	81 1d       	adc	r24, r1
 532:	81 1d       	adc	r24, r1
 534:	08 95       	ret

00000536 <__fp_split3>:
 536:	57 fd       	sbrc	r21, 7
 538:	90 58       	subi	r25, 0x80	; 128
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	59 f0       	breq	.+22     	; 0x556 <__fp_splitA+0x10>
 540:	5f 3f       	cpi	r21, 0xFF	; 255
 542:	71 f0       	breq	.+28     	; 0x560 <__fp_splitA+0x1a>
 544:	47 95       	ror	r20

00000546 <__fp_splitA>:
 546:	88 0f       	add	r24, r24
 548:	97 fb       	bst	r25, 7
 54a:	99 1f       	adc	r25, r25
 54c:	61 f0       	breq	.+24     	; 0x566 <__fp_splitA+0x20>
 54e:	9f 3f       	cpi	r25, 0xFF	; 255
 550:	79 f0       	breq	.+30     	; 0x570 <__fp_splitA+0x2a>
 552:	87 95       	ror	r24
 554:	08 95       	ret
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	55 1f       	adc	r21, r21
 55e:	f2 cf       	rjmp	.-28     	; 0x544 <__fp_split3+0xe>
 560:	46 95       	lsr	r20
 562:	f1 df       	rcall	.-30     	; 0x546 <__fp_splitA>
 564:	08 c0       	rjmp	.+16     	; 0x576 <__fp_splitA+0x30>
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	18 06       	cpc	r1, r24
 56c:	99 1f       	adc	r25, r25
 56e:	f1 cf       	rjmp	.-30     	; 0x552 <__fp_splitA+0xc>
 570:	86 95       	lsr	r24
 572:	71 05       	cpc	r23, r1
 574:	61 05       	cpc	r22, r1
 576:	08 94       	sec
 578:	08 95       	ret

0000057a <__fp_zero>:
 57a:	e8 94       	clt

0000057c <__fp_szero>:
 57c:	bb 27       	eor	r27, r27
 57e:	66 27       	eor	r22, r22
 580:	77 27       	eor	r23, r23
 582:	cb 01       	movw	r24, r22
 584:	97 f9       	bld	r25, 7
 586:	08 95       	ret

00000588 <__gesf2>:
 588:	b2 df       	rcall	.-156    	; 0x4ee <__fp_cmp>
 58a:	08 f4       	brcc	.+2      	; 0x58e <__gesf2+0x6>
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__divmodhi4>:
 590:	97 fb       	bst	r25, 7
 592:	09 2e       	mov	r0, r25
 594:	07 26       	eor	r0, r23
 596:	0a d0       	rcall	.+20     	; 0x5ac <__divmodhi4_neg1>
 598:	77 fd       	sbrc	r23, 7
 59a:	04 d0       	rcall	.+8      	; 0x5a4 <__divmodhi4_neg2>
 59c:	0c d0       	rcall	.+24     	; 0x5b6 <__udivmodhi4>
 59e:	06 d0       	rcall	.+12     	; 0x5ac <__divmodhi4_neg1>
 5a0:	00 20       	and	r0, r0
 5a2:	1a f4       	brpl	.+6      	; 0x5aa <__divmodhi4_exit>

000005a4 <__divmodhi4_neg2>:
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255

000005aa <__divmodhi4_exit>:
 5aa:	08 95       	ret

000005ac <__divmodhi4_neg1>:
 5ac:	f6 f7       	brtc	.-4      	; 0x5aa <__divmodhi4_exit>
 5ae:	90 95       	com	r25
 5b0:	81 95       	neg	r24
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	08 95       	ret

000005b6 <__udivmodhi4>:
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	51 e1       	ldi	r21, 0x11	; 17
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <__udivmodhi4_ep>

000005be <__udivmodhi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	a6 17       	cp	r26, r22
 5c4:	b7 07       	cpc	r27, r23
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__udivmodhi4_ep>
 5c8:	a6 1b       	sub	r26, r22
 5ca:	b7 0b       	sbc	r27, r23

000005cc <__udivmodhi4_ep>:
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	5a 95       	dec	r21
 5d2:	a9 f7       	brne	.-22     	; 0x5be <__udivmodhi4_loop>
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	bc 01       	movw	r22, r24
 5da:	cd 01       	movw	r24, r26
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
